from typing import Any, ClassVar

import lief.logging # type: ignore

class LEVEL:
    CRITICAL: ClassVar[LEVEL] = ...
    DEBUG: ClassVar[LEVEL] = ...
    ERROR: ClassVar[LEVEL] = ...
    INFO: ClassVar[LEVEL] = ...
    OFF: ClassVar[LEVEL] = ...
    TRACE: ClassVar[LEVEL] = ...
    WARN: ClassVar[LEVEL] = ...
    __name__: str
    def __init__(self, *args, **kwargs) -> None: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...

def critical(msg: str) -> None: ...
def debug(msg: str) -> None: ...
def disable() -> None: ...
def enable() -> None: ...
def enable_debug() -> None: ...
def err(msg: str) -> None: ...
def get_level() -> lief.logging.LEVEL: ...
def info(msg: str) -> None: ...
def log(level: lief.logging.LEVEL, msg: str) -> None: ...
def reset() -> None: ...
def set_level(level: lief.logging.LEVEL) -> None: ...
def set_path(path: str) -> None: ...
def warn(msg: str) -> None: ...
