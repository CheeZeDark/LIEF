/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
  ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
  ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
  apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
  throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

def ghidraSettingsDir

if (System.env.GHIDRA_SETTINGS_DIR) {
    ghidraSettingsDir = System.env.GHIDRA_SETTINGS_DIR
}
else if (project.hasProperty("GHIDRA_SETTINGS_DIR")) {
    ghidraSettingsDir = project.getProperty("GHIDRA_SETTINGS_DIR")
}


/* This part is taken from https://github.com/trailofbits/BTIGhidra which is
 * itself inspired from https://github.com/cmu-sei/kaiju
 */
buildExtension {
    exclude 'gradle*'
    exclude '.cache'
    exclude 'compile_commands.json'
    exclude 'jni/**'
    exclude '_work/**'
    exclude 'CMakeLists.txt'
    archiveBaseName = "${DISTRO_PREFIX}_${RELEASE_NAME}_${project.name}"
}

task copyZip(type: Copy) {

    if (!ghidraSettingsDir) {
      throw new GradleException("GHIDRA_SETTINGS_DIR is not defined!")
    }

    group = "Installation"
    description = "Copies zip contents into special Extensions directory so user may enable or disable easily with reinstalling from gradle each time."

    from "${buildExtension.destinationDirectory.get()}/${buildExtension.archiveBaseName.get()}.${buildExtension.archiveExtension.get()}"
    into ghidraSettingsDir + '/Extensions'

    dependsOn buildExtension
}

task installZip(type: Exec) {
    if (!ghidraSettingsDir) {
      throw new GradleException("GHIDRA_SETTINGS_DIR is not defined!")
    }

    group = "Installation"
    description = "Installs the zip package in installed Ghidra's default extension directory"

    workingDir ghidraSettingsDir + '/Extensions'

    commandLine 'unzip', '-o', "${buildExtension.destinationDirectory.get()}/${buildExtension.archiveBaseName.get()}.${buildExtension.archiveExtension.get()}"

    dependsOn copyZip
    mustRunAfter copyZip
}

task install() {
    dependsOn installZip

    group = "Installation"
    description = "Alternate name for installZip task"

    doLast {
        logger.quiet("Installed LIEF from zip!")
    }
}

repositories {
  // Declare dependency repositories here.  This is not needed if dependencies are manually
  // dropped into the lib/ directory.
  // See https://docs.gradle.org/current/userguide/declaring_repositories.html for more info.
  // Ex: mavenCentral()
}

dependencies {
  // Any external dependencies added here will automatically be copied to the lib/ directory when
  // this extension is built.
}

// Exclude additional files from the built extension
// Ex: buildExtension.exclude '.idea/**'
